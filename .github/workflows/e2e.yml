name: E2E tests

on:
  push:
  pull_request:

jobs:
  e2e:
    name: Run server e2e:auto and upload logs
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        node: [18, 20]
        include:
          # Exercise cleanup path on a single matrix permutation
          - os: ubuntu-latest
            node: 20
            START_WITH_REGISTER: 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: 'npm'

      - name: Install server dependencies
        working-directory: server
        run: npm ci

      - name: Run mapping verifier (pure-Python)
        # run on matrix runners (ubuntu/windows) but the verifier reads repo-root data/ CSVs
        # keep it simple and run using python from PATH; fail the step if verifier exits non-zero
        working-directory: ${{ github.workspace }}
        run: |
          echo 'Running scripts/verify_mapping.py'
          python scripts/verify_mapping.py

      - name: Run e2e:auto (capture output)
        working-directory: server
        continue-on-error: true
        env:
          # pass matrix labels into the runner for inclusion in filenames
          CI_OS: ${{ matrix.os }}
          CI_NODE: ${{ matrix.node }}
          # Enable test registration/cleanup when included by matrix
          START_WITH_REGISTER: ${{ matrix.START_WITH_REGISTER || 'false' }}
          # Gate cleanup endpoint activation
          TEST_CLEANUP_ENABLED: ${{ matrix.START_WITH_REGISTER == 'true' && '1' || '0' }}
          # Pass cleanup token from secrets when present (only the included matrix should set START_WITH_REGISTER)
          TEST_CLEANUP_TOKEN: ${{ secrets.TEST_CLEANUP_TOKEN || '' }}
          # Example overrides - uncomment /set as needed
          # START_SCRIPT: start:dev
          # SERVER_PORT: 4001
        run: |
          echo "Running on OS=${{ matrix.os }} Node=${{ matrix.node }}"
          npm run e2e:auto --silent > e2e-output.txt 2>&1 || true
          # if runner created e2e-output.txt in server dir, copy to root for artifact pick-up
          if [ -f e2e-output.txt ]; then echo 'root e2e-output exists'; fi
          if [ -f server/e2e-output.txt ]; then cp server/e2e-output.txt e2e-output.txt || true; fi
          # copy structured summary if created
          if [ -f server/e2e-summary.json ]; then cp server/e2e-summary.json e2e-summary-${{ matrix.os }}-node${{ matrix.node }}.json || true; fi

      - name: Print & validate structured summary
        if: always()
        working-directory: server
        run: |
          # choose the per-matrix filename if present, else fallback to server/tests/e2e-summary.json
          SJSON=e2e-summary-${{ matrix.os }}-node${{ matrix.node }}.json
          if [ -f "$SJSON" ]; then cat "$SJSON"; SUMMARY_FILE="$SJSON"; else
            if [ -f tests/e2e-summary.json ]; then cat tests/e2e-summary.json; SUMMARY_FILE=tests/e2e-summary.json; else echo 'No summary found'; exit 0; fi
          fi
          # parse JSON to detect failures (sent !== attempts or failed > 0)
          if command -v jq >/dev/null 2>&1; then
            sent=$(jq -r '.sent // 0' "$SUMMARY_FILE")
            attempts=$(jq -r '.attempts // 0' "$SUMMARY_FILE")
            failed=$(jq -r '.failed // 0' "$SUMMARY_FILE")
            echo "Summary: attempts=$attempts sent=$sent failed=$failed"
            if [ "$sent" -ne "$attempts" ] || [ "$failed" -gt 0 ]; then
              echo "E2E summary indicates failures: failing job"
              exit 2
            fi
          else
            echo "jq not available on this runner; skipping structured validation. To enable, install jq or run on ubuntu-latest which includes jq."
          fi

      - name: Upload structured summary artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-summary-${{ matrix.os }}-node${{ matrix.node }}
          path: |
            e2e-summary-${{ matrix.os }}-node${{ matrix.node }}.json
            server/e2e-summary.json
            tests/e2e-summary.json
      - name: Upload e2e logs
        uses: actions/upload-artifact@v4
        with:
          name: e2e-output-${{ matrix.os }}-node${{ matrix.node }}
          path: |
            e2e-output.txt
            server/e2e-server-*.log
            server/e2e-output.txt
            server/e2e-summary.json
            e2e-summary-${{ matrix.os }}-node${{ matrix.node }}.json

      - name: Fail job if e2e failed
        if: always()
        run: |
          rc=$(cat server/e2e-rc.txt || echo 0)
          echo "E2E return code: $rc"
          if [ "$rc" -ne "0" ]; then
            echo "E2E failed; failing job."
            exit $rc
          fi

  cleanup-integration:
    name: Cleanup integration test
    runs-on: ubuntu-latest
    needs: e2e
    if: ${{ secrets.TEST_CLEANUP_TOKEN != '' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install server deps
        working-directory: server
        run: npm ci

      - name: Run cleanup integration test
        working-directory: server
        env:
          TEST_CLEANUP_ENABLED: '1'
          TEST_CLEANUP_TOKEN: ${{ secrets.TEST_CLEANUP_TOKEN }}
        run: |
          echo 'Starting server (cleanup enabled)'
          npm run start:cleanup &
          SERVER_PID=$!
          # wait for readiness
          for i in {1..60}; do
            if nc -z localhost 4000; then break; fi
            sleep 1
          done
          echo 'Running integration test'
          node tests/cleanup_integration_test.js
          TEST_RC=$?
          echo "Test rc: $TEST_RC"
          # capture server log if exists
          sleep 1
          pkill -P $SERVER_PID || true
          exit $TEST_RC

      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cleanup-integration-logs
          path: |
            server/tests/run_cleanup_server.log
            server/e2e-output.txt
